1、5键键盘的输出 【模拟键盘输出】
有一个特殊的5键键盘，上面有a，ctrl-c，ctrl-x，ctrl-v，ctrl-a五个键。a键在屏幕上输出一个字母a；ctrl-c将当前选择的字母复制到剪贴板；ctrl-x将当前选择的字母复制到剪贴板，并清空选择的字母；ctrl-v将当前剪贴板里的字母输出到屏幕；ctrl-a选择当前屏幕上的所有字母。注意：
1 剪贴板初始为空，新的内容被复制到剪贴板时会覆盖原来的内容
2 当屏幕上没有字母时，ctrl-a无效
3 当没有选择字母时，ctrl-c和ctrl-x无效
4 当有字母被选择时，a和ctrl-v这两个有输出功能的键会先清空选择的字母，再进行输出

给定一系列键盘输入，输出最终屏幕上字母的数量。

输入描述:
输入为一行，为简化解析，用数字1 2 3 4 5代表a，ctrl-c，ctrl-x，ctrl-v，ctrl-a五个键的输入，数字用空格分隔
输出描述:
输出一个数字，为最终屏幕上字母的数量

示例1：
输入
1 1 1
输出
3
说明
连续键入3个a，故屏幕上字母的长度为3

示例2：
输入
1 1 5 1 5 2 4 4
输出
2
说明
输入两个a后ctrl-a选择这两个a，再输入a时选择的两个a先被清空，所以此时屏幕只有一个a，后续的ctrl-a，ctrl-c选择并复制了这一个a，最后两个ctrl-v在屏幕上输出两个a，故屏幕上字母的长度为2（第一个ctrl-v清空了屏幕上的那个a）

答案：
inputArray.forEach(op => {
    if (op == '1') {
        //a
        count = selCount > 0 ? 1 : count + 1;
        selCount = 0;
    } else if (op == '2') {
        //复制
        copyCount = selCount;
    } else if (op == '3') {
        //剪切
        count -= selCount;
        copyCount = selCount;
        selCount = 0;
    } else if (op == '4') {
        //粘贴
        count -= selCount;
        selCount = 0;
        count += copyCount;
    } else if (op == '5') {
        //全选
        selCount = count;
    }
})
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        while (in.hasNext()) {
            String totalStr=in.nextLine();
            int count = 0;
        int copyCount = 0;
        int selCount = 0;
        boolean overOp = false;
        for (char op : totalStr.toCharArray()) {
            if (op == '1') {
                //a
                count = selCount > 0 ? 1 : count + 1;
                selCount = 0;
            } else if (op == '2') {
                //复制
                copyCount = selCount;
            } else if (op == '3') {
                //剪切
                count -= selCount;
                copyCount = selCount;
                selCount = 0;
            } else if (op == '4') {
                //粘贴
                count -= selCount;
                selCount = 0;
                count += copyCount;
            } else if (op == '5') {
                //全选
                selCount = count;
            }
        }
        System.out.println(count);
        }
    }
}

2、N进制减法 
实现一个基于字符串的N机制的减法。 
需要对输入的两个字符串按照给定的N进制进行减法操作，输出正负符号和表示结果的字符串。

输入描述:
输入：三个参数。
第一个参数是整数形式的进制N值，N值范围为大于等于2、小于等于35。
第二个参数为被减数字符串；
第三个参数为减数字符串。有效的字符包括0~9以及小写字母a~z，字符串有效字符个数最大为100个字符，另外还有结尾的\0。
限制：
输入的被减数和减数，除了单独的0以外，不能是以0开头的字符串。 
如果输入有异常或计算过程中有异常，此时应当输出-1表示错误。 
输出描述:
输出：2个。
其一为减法计算的结果，-1表示出错，0表示结果为整数，1表示结果为负数。
其二为表示结果的字符串。

示例1:
输入
2 11 1
输出
0 10
说明
按二进制计算 11 -1 ，计算正常，0表示符号为正数，结果为10

示例2:
输入
8 07 1
输出
-1
说明
按8进制，检查到减数不符合非0前导的要求，返回结果为-1，没有其他结果内容。

答案：
import java.util.ArrayList;
import java.util.Scanner;
import java.util.TreeSet;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        Integer request = Integer.parseInt(sc.nextLine());
        sc.close();
        TreeSet<Integer> set = new TreeSet<>();
        for (String str : input.split(",")) {
            if (str.contains("-")) {
                String[] split = str.split("-");
                int start = Integer.parseInt(split[0]);
                int end = Integer.parseInt(split[1]);
                for (int i = start; i <= end; i++) {
                    set.add(i);
                }
            } else {
                set.add(Integer.parseInt(str));
            }
        }
        set.remove(request);

        ArrayList<Integer> list = new ArrayList<>(set);
        StringBuilder sb = new StringBuilder();

        Integer start = list.get(0);
        Integer last = start;
        for (int i = 1; i < list.size(); i++) {
            Integer cur = list.get(i);
            if (cur == last + 1) {
                last = cur;
            } else {
                append(sb, start, last);
                start = last = cur;
            }
        }
        append(sb, start, last);
        System.out.println(sb.substring(0, sb.length() - 1));
    }

    private static void append(StringBuilder sb, Integer start, Integer last) {
        if (start.equals(last)) {
            sb.append(last).append(",");
        } else {
            sb.append(start).append("-").append(last).append(",");
        }
    }
}

3、TLV解码
TLV编码是按[Tag Length Value]格式进行编码的，一段码流中的信元用Tag标识，Tag在码流中唯一不重复，Length表示信元Value的长度，Value表示信元的值。
码流以某信元的Tag开头，Tag固定占一个字节，Length固定占两个字节，字节序为小端序。
现给定TLV格式编码的码流，以及需要解码的信元Tag，请输出该信元的Value。
输入码流的16机制字符中，不包括小写字母，且要求输出的16进制字符串中也不要包含小写字母；码流字符串的最大长度不超过50000个字节。

输入描述:
输入的第一行为一个字符串，表示待解码信元的Tag；
输入的第二行为一个字符串，表示待解码的16进制码流，字节之间用空格分隔。
输出描述:
输出一个字符串，表示待解码信元以16进制表示的Value。

示例1：
输入
31
32 01 00 AE 90 02 00 01 02 30 03 00 AB 32 31 31 02 00 32 33 33 01 00 CC
输出
32 33
说明
需要解析的信元的Tag是31，从码流的起始处开始匹配，Tag为32的信元长度为1（01 00，小端序表示为1）；第二个信元的Tag是90，其长度为2；第三个信元的Tag是30，其长度为3；第四个信元的Tag是31，其长度为2（02 00），所以返回长度后面的两个字节即可，即32 33。

答案：
解法一：
import java.util.Scanner;

public class Main {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		while (in.hasNextLine()) {// 注意，如果输入是多个测试用例，请通过while循环处理多个测试用例
			String key=in.nextLine();
			String[] arr=in.nextLine().replaceAll("[a-z]", "").split("[ ]");
			String tag="";
			int length;
			String value="";
			for(int i=0;i<arr.length;) {
				tag="";
				length=0;
				value="";
				tag=arr[i];
				length=Integer.valueOf(arr[i+2]+arr[i+1], 16);
				for(int j=1;j<=length;j++) {
					value+=arr[i+2+j]+" ";
				}
				if(key.equals(tag)) {
					System.out.println(value.trim());
				}
//				System.out.println(tag+" "+length+" "+value.trim());
				i=i+2+length+1;
			}
		}
		
		
		
	
	}
}

4、VLAN资源池 
VLAN是一种对局域网设备进行逻辑划分的技术，为了标识不同的VLAN，引入VLAN ID(1-4094之间的整数)的概念。定义一个VLAN ID的资源池(下称VLAN资源池)，资源池中连续的VLAN用开始VLAN-结束VLAN表示，不连续的用单个整数表示，所有的VLAN用英文逗号连接起来。现在有一个VLAN资源池，业务需要从资源池中申请一个VLAN，需要你输出从VLAN资源池中移除申请的VLAN后的资源池。

输入描述:
第一行为字符串格式的VLAN资源池，第二行为业务要申请的VLAN，VLAN的取值范围为[1,4094]之间的整数。
输出描述:
从输入VLAN资源池中移除申请的VLAN后字符串格式的VLAN资源池，输出要求满足题目描述中的格式，并且按照VLAN从小到大升序输出。
如果申请的VLAN不在原VLAN资源池内，输出原VLAN资源池升序排序后的字符串即可。

示例1：
输入
1-5
2
输出
1,3-5
说明
原VLAN资源池中有VLAN 1、2、3、4、5，从资源池中移除2后，剩下VLAN 1、3、4、5，按照题目描述格式并升序后的结果为1,3-5。

示例2：
输入
20-21,15,18,30,5-10
15
输出
5-10,18,20-21,30
说明
原VLAN资源池中有VLAN 5、6、7、8、9、10、15、18、20、21、30，从资源池中移除15后，资源池中剩下的VLAN为  5、6、7、8、9、10、18、20、21、30，按照题目描述格式并升序后的结果为5-10,18,20-21,30。

示例3：
输入
5,1-3
10
输出
1-3,5
说明
原VLAN资源池中有VLAN 1、2、3，5，申请的VLAN 10不在原资源池中，将原资源池按照题目描述格式并按升序排序后输出的结果为1-3,5。
备注:
输入VLAN资源池中VLAN的数量取值范围为[2-4094]间的整数，资源池中VLAN不重复且合法([1,4094]之间的整数)，输入是乱序的。

答案：
解法一：
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
 
public class Main {
    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String str = null;
        int[] vlan = new int[4094];
        try {
            str = br.readLine();
            int num = Integer.parseInt(br.readLine());
            String[] split = str.split(",");
            for (String s : split) {
                try {
                    int index = Integer.parseInt(s);
                    if (index == num) continue;
                    vlan[index] = 1;
                } catch (NumberFormatException exception) {
                    if (s.contains("-")) {
                        String[] s_s = s.split("-");
                        int first = Integer.parseInt(s_s[0]);
                        int end = Integer.parseInt(s_s[1]);
                        for (int i = first; i <= end; i++) {
                            if (num != i) {
                                vlan[i] = 1;
                            }
                        }
                    }
                }
            }
            StringBuilder result = new StringBuilder();
            for (int i = 1; i < vlan.length; i++) {
                if (vlan[i] == 1) {
                    result.append(",");
                    result.append(i);
                    if (++i < vlan.length && vlan[i] == 1) {
                        result.append("-");
                        while (vlan[++i] == 1) {
 
                        }
                        result.append(i - 1);
                    }
                }
            }
            String resultStr = result.toString();
            if (result.indexOf(",") == 0) {
                resultStr = resultStr.substring(1);
            }
            System.out.println(resultStr);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
 
}

解法二：
import java.util.*;
 
public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String s = in.nextLine();
        String[] array = s.split(",");
        Set<Integer> set = new HashSet();
        for (int i = 0; i < array.length; i++) {
            if (array[i].length() == 0) {
                continue;
            }
            String[] tempArray = array[i].split("-");
            if (tempArray.length == 2) {
                for (int j = Integer.valueOf(tempArray[0]); j <= Integer.valueOf(tempArray[1]); j++) {
                    set.add(j);
                }
            }else{
                set.add(Integer.valueOf(tempArray[0]));
            }
        }
        String filter = in.nextLine();
        set.remove(Integer.valueOf(filter));
        List<Integer> list = new ArrayList(set);
        if (list.size() == 1) {
            System.out.println(list.get(0));
            return;
        }
        Collections.sort(list);
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < list.size()-1; i++) {
            if (list.get(i) == list.get(i + 1) - 1) {
                result.append(","+list.get(i));
                while (i<list.size()-1&&list.get(i) == list.get(i + 1) - 1) {
                    i++;
                }
                result.append("-" + list.get(i));
            }else{
                result.append("," + list.get(i));
            }
            if (i == list.size() - 2) {
                result.append("," + list.get(i + 1));
            }
        }
        String resultString = result.toString();
        if (resultString.length()>0&&resultString.charAt(0) == ',') {
            resultString=resultString.substring(1);
        }
        System.out.println(resultString);
    }
}

5、按身高和体重排队
某学校举行运动会，学生们按编号(1、2、3…n)进行标识，现需要按照身高由低到高排列，对身高相同的人，按体重由轻到重排列；对于身高体重都相同的人，维持原有的编号顺序关系。请输出排列后的学生编号。

输入描述:
两个序列，每个序列由n个正整数组成（0 < n <= 100）。第一个序列中的数值代表身高，第二个序列中的数值代表体重。
输出描述:
排列结果，每个数值都是原始序列中的学生编号，编号从1开始

示例1：
输入
4
100 100 120 130
40 30 60 50
输出
2 1 3 4
说明
输出的第一个数字2表示此人原始编号为2，即身高为100，体重为30的这个人。由于他和编号为1的人身高一样，但体重更轻，因此要排在1前面。

示例2：
输入
3
90 110 90
45 60 45
输出
1 3 2
说明
1和3的身高体重都相同，需要按照原有位置关系让1排在3前面，而不是3 1 2

答案：
解法一：
import java.util.Arrays;
import java.util.Scanner;
 
public class Main {
     
    static class Node implements Comparable<Node>{
        int i;
        int h;
        int w;
        Node(int i,int h,int w){
            this.i = i ;
            this.h = h ;
            this.w = w ;
        }
         
        @Override
        public int compareTo(Node o){
            if(h != o.h)
                return h - o.h ;
            if(w!= o.w)
                return w - o.w ;
            return i - o.i;
        }
    }
     
    public static void main(String[] args){
        Scanner in = new Scanner(System.in) ;
        while(in.hasNext()){
            int n = in.nextInt() ;
            int [] h = new int [n] ;
            int [] w = new int [n] ;
            for(int i = 0;i < n;i++){
                h[i] = in.nextInt() ;
            }
            for(int i = 0;i < n; i++){
                w[i]= in.nextInt();
            }
            Node[] nodes = new Node [n];
            for(int i = 0;i < n; i++){
                nodes[i] = new Node(i+1,h[i],w[i]);
            }
            Arrays.sort(nodes);
            for(int i =0;i<n;i++){
                System.out.printf("%d%c",nodes[i].i,1 == n-1 ? '\n':' ');
            }
        }
    }
}

6、按索引范围翻转文章片段 按单词下标区间翻转文章内容
输入一个英文文章片段，翻转指定区间的单词顺序，标点符号和普通字母一样处理。例如输入字符串"I am a developer. "，区间[0,3]，则输出"developer. a am I"。

String reverseWords(String s, int start, int end)

输入描述:
使用换行隔开三个参数，第一个参数为英文文章内容即英文字符串，第二个参数为翻转起始单词下标(下标从0开始)，第三个参数为结束单词下标。
输出描述:
翻转后的英文文章片段所有单词之间以一个半角空格分隔进行输出

示例1：
输入
I am a developer.
1
2
输出
I a am developer.
示例2：
输入
  hello world!  
0
1
输出
world! hello
说明
输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
示例3：
输入
I am a   developer.
0
3
输出
developer. a am I
说明
如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
示例4：
输入
Hello!
0
3
输出
EMPTY
说明
指定翻转区间只有一个单词或无有效单词，则统一输出"EMPTY"

答案：
解法一：
import java.util.ArrayList;
import java.util.Scanner;
import java.util.TreeSet;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        Integer request = Integer.parseInt(sc.nextLine());
        sc.close();
        TreeSet<Integer> set = new TreeSet<>();
        for (String str : input.split(",")) {
            if (str.contains("-")) {
                String[] split = str.split("-");
                int start = Integer.parseInt(split[0]);
                int end = Integer.parseInt(split[1]);
                for (int i = start; i <= end; i++) {
                    set.add(i);
                }
            } else {
                set.add(Integer.parseInt(str));
            }
        }
        set.remove(request);

        ArrayList<Integer> list = new ArrayList<>(set);
        StringBuilder sb = new StringBuilder();

        Integer start = list.get(0);
        Integer last = start;
        for (int i = 1; i < list.size(); i++) {
            Integer cur = list.get(i);
            if (cur == last + 1) {
                last = cur;
            } else {
                append(sb, start, last);
                start = last = cur;
            }
        }
        append(sb, start, last);
        System.out.println(sb.substring(0, sb.length() - 1));
    }

    private static void append(StringBuilder sb, Integer start, Integer last) {
        if (start.equals(last)) {
            sb.append(last).append(",");
        } else {
            sb.append(start).append("-").append(last).append(",");
        }
    }
}

7、报数游戏 
100个人围成一圈，每个人有一个编码，编号从1开始到100。他们从1开始依次报数，报到为M的人自动退出圈圈，然后下一个人接着从1开始报数，直到剩余的人数小于M。请问最后剩余的人在原先的编号为多少？

输入描述:
输入一个整数参数M
输出描述:
如果输入参数M小于等于1或者大于等于100，输出“ERROR!”；否则按照原先的编号从小到大的顺序，以英文逗号分割输出编号字符串

示例1：
输入
3
输出
58,91
说明
输入M为3，最后剩下两个人
示例2：
输入
4
输出
34,45,97
说明
输入M为4，最后剩下三个人
 
答案：
解法一：
import java.util.Scanner;
import java.util.Collections;
import java.util.ArrayList;

public class Main {
    static class node{
        int val;
        node next = null;
        node(int val){this.val=val;}
    }
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int M = in.nextInt();
        if(M<=1||M>=100) System.out.println("ERROR!");
        else{
            ArrayList<Integer> ans = new ArrayList<>();
            node head = new node(1),pre = head;
            for(int i=2;i<=100;i++){
                node now = new node(i);
                pre.next=now;
                pre = now;
            }
            pre.next=head;
            //num记录剩下的人的数量,k记录当前的报数
            int num = 100,k=1;
            while(true){
                k++;
                pre = pre.next;
                head = head.next;
                //如果报数为M，就删除链表的结点
                if(k==M){
                    pre.next=head.next;
                    head=pre.next;
                    k=1;
                    num--;
                }
                if(num<M){
                    pre=head;
                    do{
                        ans.add(head.val);
                        head=head.next;
                    }while(head !=pre);
                    break;
                }
            }
            Collections.sort(ans);
            for(int i=0;i<ans.size();i++){
                System.out.printf("%d%c",ans.get(i),i==ans.size()-1?'\n':',');
            }
        }
    }
}

解法二：
import java.util.*;

public class Main {

    public static void main(String[] args) {
        List<Integer> peopleNos = new ArrayList(100);
        for(int i = 1; i <= 100;i++) {
            peopleNos.add(i);
        }
        Scanner scan = new Scanner(System.in);
        int m = scan.nextInt();
        if (m <= 1 || m >= 100) {
            System.out.println("ERROR!");
            return;
        }
        int num = 0;
        int index = 0;
        while (peopleNos.size() >= m) {
            num++;
            if (index >= peopleNos.size()) {
                index = 0;
            }
            Integer no = peopleNos.get(index);
            if (num == m) {
                //删除该元素，下个元素从1开始报数
                peopleNos.remove(no);
                num = 0;
                index--;
            }
            index++;
        }
   
        StringBuilder builder = new StringBuilder();
        int count = 0;
        for (Integer i : peopleNos) {
            builder.append(i);
            if (count != peopleNos.size() - 1) {
                builder.append(",");
            }
            count++;
        }
        System.out.println(builder.toString());
    }
}

8、比赛 
一个有N个选手参加比赛，选手编号为1~N（3<=N<=100），有M（3<=M<=10）个评委对选手进行打分。打分规则为每个评委对选手打分，最高分10分，最低分1分。
请计算得分最多的3位选手的编号。如果得分相同，则得分高分值最多的选手排名靠前(10分数量相同，则比较9分的数量，以此类推，用例中不会出现多个选手得分完全相同的情况)。

输入描述:
第一行为半角逗号分割的两个正整数，第一个数字表示M（3<=M<=10）个评委，第二个数字表示N（3<=N<=100）个选手。
第2到M+1行是半角逗号分割的整数序列，表示评委为每个选手的打分，0号下标数字表示1号选手分数，1号下标数字表示2号选手分数，依次类推。
输出描述:
选手前3名的编号。
注：若输入为异常，输出-1，如M、N、打分不在范围内。

示例1：
输入
4,5
10,6,9,7,6
9,10,6,7,5
8,10,6,5,10
9,10,8,4,9
输出
2,1,5
说明
第一行代表有4个评委，5个选手参加比赛
矩阵代表是4*5，每个数字是选手的编号，每一行代表一个评委对选手的打分排序，
2号选手得分36分排第1，1号选手36分排第2，5号选手30分(2号10分值有3个，1号10分值只有1个，所以2号排第一)
示例2：
输入
2,5
7,3,5,4,2
8,5,4,4,3
输出
-1
说明
只有2个评委，要求最少为3个评委
示例3：
输入
4,2
8,5
5,6
10,4
8,9
输出
-1
说明
只有2名选手参加，要求最少为3名
示例4：
输入
4,5
11,6,9,7,8
9,10,6,7,8
8,10,6,9,7
9,10,8,6,7
输出
-1
说明
第一个评委给第一个选手打分11，无效分数

答案：
解法一（python）：
import sys

input = """
    4,5
10,6,9,7,6
9,10,6,7,5
8,10,6,5,10
9,10,8,4,9"""

if __name__ == "__main__":
    def slution():
        # 读取第一行的n
        try:
            p, x = sys.stdin.readline().strip().split(",")
            p = int(p)
            x = int(x)
        except:
            print(-1)
            return
        else:
            if (p >= 3 and p <= 10) and (x >= 3 and x <= 100):
                dp = [[0 for i in range(p)] for i in range(x)]
                for i in range(p):
                    try:
                        # 每一行的数据
                        line = sys.stdin.readline().strip().split(",")
                    except:
                        print(-1)
                        return
                    else:
                        for index, num in enumerate(line):
                            try:
                                num = int(num)
                                if num >= 1 and num <= 10:
                                    dp[index][i] = num
                                else:
                                    print(-1)
                                    return
                            except:
                                print(-1)
                                return
                res = []
                for index, i in enumerate(dp):
                    i.sort()
                    i.reverse()
                    res.append((sum(i), i, index+1))
                res.sort(key=lambda x: (x[0], x[1]))
                res.reverse()
                print(f"{res[0][2]},{res[1][2]},{res[2][2]}")
            else:
                print(-1)

    slution()


9、查找接口成功率最优时间段 
服务之间交换的接口成功率作为服务调用关键质量特性，某个时间段内的接口失败率使用一个数组表示，数组中每个元素都是单位时间内失败率数值，数组中的数值为0~100的整数，给定一个数值(minAverageLost)表示某个时间段内平均失败率容忍值，即平均失败率小于等于minAverageLost，找出数组中最长时间段，如果未找到则直接返回NULL。

输入描述:
输入有两行内容，第一行为{minAverageLost}，第二行为{数组}，数组元素通过空格(" ")分隔，minAverageLost及数组中元素取值范围为0~100的整数，数组元素的个数不会超过100个。
输出描述:
找出平均值小于等于minAverageLost的最长时间段，输出数组下标对，格式{beginIndex}-{endIndx}(下标从0开始)，如果同时存在多个最长时间段，则输出多个下标对且下标对之间使用空格(" ")拼接，多个下标对按下标从小到大排序。

示例1：
输入
1
0 1 2 3 4
输出
0-2
说明
A、输入解释：minAverageLost=1，数组[0, 1, 2, 3, 4]
B、前3个元素的平均值为1，因此数组第一个至第三个数组下标，即0-2
示例2：
输入
2
0 0 100 2 2 99 0 2
输出
0-1 3-4 6-7
说明
A、输入解释：minAverageLost=2，数组[0, 0, 100, 2, 2, 99, 0, 2]
B、通过计算小于等于2的最长时间段为：数组下标为0-1即[0, 0]，数组下标为3-4即[2, 2]，数组下标为6-7即[0, 2]，这三个部分都满足平均值小于等2的要求，因此输出0-1 3-4 6-7

答案：
解法一：
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {
    private static List<String> sResultList = new ArrayList<>();
    private static int sCurrentLength = 0;
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNextLine()) {
            int minAvg = Integer.parseInt(scanner.nextLine().trim());
            String[] strings = scanner.nextLine().trim().split(" ");
            List<Integer> list = new ArrayList<Integer>();
            for (int i = 0; i < strings.length; i++) {
                list.add(Integer.parseInt(strings[i]));
            }
            getPeriod(minAvg, list);
            if (!sResultList.isEmpty()) {
                for (int i = 0; i < sResultList.size(); i++) {
                    System.out.print(sResultList.get(i));
                    System.out.print(" ");
                }
            }
        }
    }

    private static void getPeriod(int minAvg, List<Integer> list) {
        sResultList.clear();
        sCurrentLength = 0;
        for (int start = 0; start < list.size() - 1; start++) {
            for (int end  = start + 1; end < list.size(); end++) {
                int sum = getSum(list, start, end);
                String result = "";
                int length = end - start + 1;
                if (sum == 0 && minAvg >= 0) {
                    result = start + "-" + end;
                } else {
                    if (sum <= minAvg * length) {
                        result = start + "-" + end;
                    }
                }
                if (result.contains("-")) {
                    if (length == sCurrentLength) {
                        sResultList.add(result);
                    }
                    if (length > sCurrentLength) {
                        sResultList.clear();
                        sResultList.add(result);
                        sCurrentLength = length;
                    }
                }
            }
        }
    }

    private static int getSum(List<Integer> list, int start, int end) {
        int sum = 0;
        for (int i = start; i <= end; i++) {
            sum += list.get(i);
        }
        return sum;
    }
}

10、查找众数及中位数
1.众数是指一组数据中出现次数量多的那个数，众数可以是多个
2.中位数是指把一组数据从小到大排列，最中间的那个数，如果这组数据的个数是奇数，那最中间那个就是中位数，如果这组数据的个数为偶数，那就把中间的两个数之和除以2，所得的结果就是中位数
3.查找整型数组中元素的众数并组成一个新的数组，求新数组的中位数

输入描述:
输入一个一维整型数组，数组大小取值范围 0<N<1000，数组中每个元素取值范围 0<E<1000
输出描述:
输出众数组成的新数组的中位数

示例1：
输入
10 11 21 19 21 17 21 16 21 18 15
输出
21
示例2：
输入
2 1 5 4 3 3 9 2 7 4 6 2 15 4 2 4
输出
3
示例3：
输入
5 1 5 3 5 2 5 5 7 6 7 3 7 11 7 55 7 9 98 9 17 9 15 9 9 1 39
输出
7

答案：
解法一：
import java.util.*;
public class Main {
    public static void main(String[] args) {
        // 输入
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] s = input.split(" ");
        int[] nums = new int[s.length];
        for (int i = 0; i < nums.length; i++) {
            nums[i] = Integer.parseInt(s[i]);
        }
        scanner.close();
        // 获取众数数组和中位数
        Integer[] manyNums = getManyArr(nums);
        int medium = 0;
        int len = manyNums.length;
        if (len % 2 == 0) {
            medium = (manyNums[len / 2 - 1] + manyNums[len / 2]) / 2;
        } else {
            medium = manyNums[len / 2];
        }
        System.out.println(medium);
    }
    
    private static Integer[] getManyArr(int[] arr) {
        if (arr == null) {
            return new Integer[0];
        }
        // 将数组元素和出现的次数转换为key-value
        Map<Integer, Integer> countMap = new HashMap<>();
        for (int i = 0; i < arr.length; i++) {
            int current = arr[i];
            if (countMap.containsKey(current)) {
                Integer count = countMap.get(current);
                countMap.put(current, ++count);
            } else {
                countMap.put(current, 1);
            }
        }
        // 获取出现最多的次数
        int countMax = 0;
        for (int value : countMap.values()) {
            if (value > countMax) {
                countMax = value;
            }
        }
        // 获取众数，并排序
        List<Integer> list = new ArrayList<>();
        for (int key : countMap.keySet()) {
            if (countMap.get(key) == countMax) {
                list.add(key);
            }
        }
        list.sort(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o1 - o2;
            }
        });
        Integer[] newArr = new Integer[list.size()];
        return list.toArray(newArr);
    }
}

解法二：
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        HashMap<Integer, Integer> map = new HashMap<>();
        int max = 0;
        List<Integer> list =new ArrayList<>();
        while (in.hasNextInt()) {
            int num = in.nextInt();
            map.merge(num,1,(a,b)->a+b);
            if (map.get(num)>max){
                list.clear();
                list.add(num);
                max = map.get(num);
            }else if (map.get(num)==max){
                list.add(num);
            }
        }
        list.sort(Integer::compare);
        int n = list.size();
        if (n%2==0){
            System.out.print((list.get(n/2)+list.get(n/2-1))/2);
        }else{
            System.out.print(list.get(n/2));
        }
    }
}
