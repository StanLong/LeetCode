
81、最大花费金额 
双十一众多商品进行打折销售，小明想购买自己心仪的一些物品，但由于受购买资金限制，所以他决定从众多心仪商品中购买三件，而且想尽可能的花完资金，现在请你设计一个程序帮助小明计算尽可能花费的最大资金数额。

输入描述:
输入第一行为一维整型数组M，数组长度小于100，数组元素记录单个商品的价格，单个商品价格小于1000。
输入第二行为购买资金的额度R，R小于100000。
输出描述:
输出为满足上述条件的最大花费额度。
注意：如果不存在满足上述条件的商品，请返回-1。

示例1
输入
23,26,36,27
78
输出
76
说明
金额23、26和27相加得到76，而且最接近且小于输入金额78
示例2
输入
23,30,40
26
输出
-1
说明
因为输入的商品，无法组合出来满足三件之和小于26.故返回-1
备注:
输入格式是正确的，无需考虑格式错误的情况。

答案：
解法一：
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] arr = sc.next().split(",");
        String sum = sc.next();
        int[] arri = new int[arr.length];
         for (int i = 0; i <arr.length; i++)
             {
                 arri[i] = Integer.parseInt(arr[i]);
             }
        System.out.println(find(arri,arr.length,Integer.parseInt(sum)));
    }

    public static int find(int a[],int size,int sum)
    {
        List<Integer> result = new ArrayList<>();
        int left,right;
        //先对数组进行排序
        Arrays.sort(a);
        //对于三元组的话,先固定一个元素，在寻找一个和为sum-val
        for(int i=0;i<size-2;i++)//i是固定的值的下标
        {
            left=i+1;//把i的右边的整体当左二元组的问题解决，left从第一个开始，也就是i+1的位置
            right=size-1;//right的话就是最后一个值，跟i的界尾没有关系，直接到了最后一个元素，也就是size-1
            while(left<right) {

                if(a[i]+a[left]+a[right]<=sum)
                {
//                    return a[i]+a[left]+a[right];
                    result.add(a[i]+a[left]+a[right]);
                    left++;
                }
                else {
                    right--;
                }
            }
        }
        Collections.sort(result);
        return result.get(result.size()-1);
    }
}


82、最大矩阵和
给定一个二维整数矩阵，要在这个矩阵中选出一个子矩阵，使得这个子矩阵内所有的数字和尽量大，我们把这个子矩阵称为和最大子矩阵，子矩阵的选取原则是原矩阵中一块相互连续的矩形区域。

输入描述:
输入的第一行包含2个整数n, m(1 <= n, m <= 10)，表示一个n行m列的矩阵，下面有n行，每行有m个整数，同一行中，每2个数字之间有1个空格，最后一个数字后面没有空格，所有的数字的在[-1000, 1000]之间。
输出描述:
输出一行一个数字，表示选出的和最大子矩阵内所有的数字和。

示例1
输入
3 4
-3 5 -1 5
2 4 -2 4
-1 3 -1 3
输出
20
说明
一个3*4的矩阵中，后面3列的子矩阵求和加起来等于20，和最大。

答案：
解法一：
import java.util.Scanner;

public class Main {
    public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
        while (sc.hasNext()) {
            String[] str = sc.nextLine().split(" ");
            int n = Integer.parseInt(str[0]);
            int m = Integer.parseInt(str[1]);
            int[][] map = new int[n][m];
            long result = Long.MIN_VALUE;
            for (int i = 0; i < n; i++) {
                String[] item = sc.nextLine().split(" ");
                for (int j = 0; j < m; j++) {
                    map[i][j] = Integer.parseInt(item[j]);
                }
            }
            for (int start = 0; start < n; start++) {
                long[] ring = new long[m];
                long[] dp = new long[m];
                for (int end = start; end < n; end++) {
                    for (int j = 0; j < m; j++) {
                        ring[j] += map[end][j];
                    }
                    result = Math.max(result, ring[0]);
                    dp[0] = ring[0];
                    for (int j = 1; j < m; j++) {
                        if (dp[j - 1] < 0) {
                            dp[j] = ring[j];
                        } else {
                            dp[j] = dp[j - 1] + ring[j];
                        }
                        result = Math.max(result, dp[j]);
                    }
                }
            }
            System.out.println(result);
        }
    }
}

83、最大括号深度
现有一字符串仅由 '('，')'，'{'，'}'，'['，']'六种括号组成。
若字符串满足以下条件之一，则为无效字符串：
  ①任一类型的左右括号数量不相等；
  ②存在未按正确顺序（先左后右）闭合的括号。
输出括号的最大嵌套深度，若字符串无效则输出0。
0≤字符串长度≤100000

输入描述:
一个只包括 '('，')'，'{'，'}'，'['，']'的字符串
输出描述:
一个整数，最大的括号深度

示例1
输入
[]
输出
1
说明
有效字符串，最大嵌套深度为1
示例2
输入
([]{()})
输出
3
说明
有效字符串，最大嵌套深度为3
示例3
输入
(]
输出
0
说明
无效字符串，有两种类型的左右括号数量不相等
示例4
输入
([)]
输出
0
说明
无效字符串，存在未按正确顺序闭合的括号
示例5
输入
)(
输出
0
说明
无效字符串，存在未按正确顺序闭合的括号

答案：
解法一：
import java.util.Scanner;
import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputStr = scanner.nextLine();
        char[] chars = inputStr.toCharArray();
        int len = chars.length;

        if (len % 2 != 0) {
            System.out.println("0");
            return;
        }

        int maxDepth = 0;
        int signLeftMin = 0; // (
        int signRightMin = 0;  // )
        int signLeftMiddle = 0;  // [
        int signRightMiddle = 0;  // ]
        int signLeftMax = 0;  // {
        int signRightMax = 0;  // }

        for (int i = 0; i < len; i++) {
            if (signRightMin > signLeftMin || signRightMiddle > signLeftMiddle || signRightMax > signLeftMax) {
                maxDepth = 0;
                break;
            }
            if (chars[i] == '(') {
                signLeftMin++;
            } else if (chars[i] == ')') {
                signRightMin++;
            } else if (chars[i] == '[') {
                signLeftMiddle++;
            } else if (chars[i] == ']') {
                signRightMiddle++;
            } else if (chars[i] == '{') {
                signLeftMax++;
            } else if (chars[i] == '}') {
                signRightMax++;
            }
        }

        if (signRightMin != signLeftMin || signRightMiddle != signLeftMiddle || signRightMax != signLeftMax) {
            maxDepth = 0;
        } else {
            // 用栈去判断
            Stack<Character> stack = new Stack<>();
            for (int i = 0; i < len; i++) {
                if (chars[i] == ')' || chars[i] == ']' || chars[i] == '}') {
                    stack.pop();

                    int tempSize = stack.size();
                    if (tempSize > maxDepth) {
                        maxDepth = tempSize;
                    }
                } else {
                    stack.push(chars[i]);

                    int tempSize = stack.size();
                    if (tempSize > maxDepth) {
                        maxDepth = tempSize;
                    }
                }
            }
        }

        System.out.print(maxDepth);
    }
}

84、最远足迹
某探险队负责对地下洞穴进行探险。探险队成员在进行探险任务时，随身携带的记录器会不定期地记录自身的坐标，但在记录的间隙中也会记录其他数据。探索工作结束后，探险队需要获取到某成员在探险过程中相对于探险队总部的最远的足迹位置。
1. 仪器记录坐标时，坐标的数据格式为(x,y)，如(1,2)、(100,200)，其中0<x<1000，0<y<1000。同时存在非法坐标，如(01,1)、(1,01)，(0,100)属于非法坐标。
2. 设定探险队总部的坐标为(0,0)，某位置相对总部的距离为：x*x+y*y。
3. 若两个座标的相对总部的距离相同，则第一次到达的坐标为最远的足迹。
4. 若记录仪中的坐标都不合法，输出总部坐标（0,0）。
备注：不需要考虑双层括号嵌套的情况，比如sfsdfsd((1,2))。

输入描述:
字符串，表示记录仪中的数据。
如：ferga13fdsf3(100,200)f2r3rfasf(300,400)
输出描述:
字符串，表示最远足迹到达的坐标。
如： (300,400)

示例1
输入
ferg(3,10)a13fdsf3(3,4)f2r3rfasf(5,10)
输出
(5,10)
说明
记录仪中的合法坐标有3个： (3,10)， (3,4)， (5,10)，其中(5,10)是相距总部最远的坐标， 输出(5,10)。
示例2
输入
asfefaweawfaw(0,1)fe
输出
(0,0)
说明
记录仪中的坐标都不合法，输出总部坐标（0,0）

答案：
解法一：
import java.util.*;

public class Main{
    public static void main(String[] args){

        Scanner sc = new Scanner(System.in);
        while (sc.hasNextLine()) {
            String str = sc.nextLine();
            int maxDistance = -1;
            String result = "";
            while (true) {
                if (str.length() == 0) {
                    break;
                }
                int leftIndex = str.indexOf("(");
                int rightIndex = str.indexOf(")");
                if (leftIndex == -1 || rightIndex == -1) {
                    break;
                }
                String ele = str.substring(leftIndex + 1, rightIndex);
                String[] es = ele.split(",");
                boolean flag = true;

                for (String s : es) {
                    if (s.startsWith("0")) {
                        flag = false;
                        break;
                    }
                    if (Integer.parseInt(s) <= 0 || Integer.parseInt(s) >= 1000){
                        flag = false;
                        break;
                    }
                }

                if (flag == false) {
                    str = str.substring(rightIndex + 1);
                    continue;
                }

                int number1 = Integer.parseInt(es[0]);
                int number2 = Integer.parseInt(es[1]);

                int distance = number1 * number1 + number2 * number2;
                if (distance > maxDistance) {
                    result = "(" + es[0] + "," + es[1] + ")";
                    maxDistance = distance;
                }
                str = str.substring(rightIndex + 1);
            }
            if (maxDistance == -1) {
                System.out.println("(0,0)");
            } else {
                System.out.println(result);
            } 
        }
    }
}

85、最长连续子序列
有N个正整数组成的一个序列。给定整数sum，求长度最长的连续子序列，使他们的和等于sum，返回此子序列的长度，如果没有满足要求的序列，返回-1。

输入描述:
序列：1,2,3,4,2

sum：6
输出描述:
序列长度：3

输入描述:
序列：1,2,3,4,2

sum：6
输出描述:
序列长度：3

示例1
输入
1,2,3,4,2
6
输出
3
说明
解释：1,2,3和4,2两个序列均能满足要求，所以最长的连续序列为1,2,3，因此结果为3
示例2
输入
1,2,3,4,2
20
输出
-1
说明
解释：没有满足要求的子序列，返回-1
备注:
输入序列仅由数字和英文逗号构成，数字之间采用英文逗号分隔；
序列长度：1 <= N <= 200；
输入序列不考虑异常情况，由题目保证输入序列满足要求。

答案：
解法一：
import java.util.*;
import java.io.*;
public class Main{
    public static void main(String[] rds)throws IOException{
        Scanner br = new Scanner(System.in);
        String str = br.nextLine();
        int sum = br.nextInt();
        String[] list = str.split(",");
        int max = -1;
        for(int i =0;i<list.length;i++){
            int temp = sum;
            for(int j = i;j<list.length;j++){
                temp -= Integer.parseInt(list[j]);
                if(temp == 0){
                    max = max>j-i?max:j-i;
                }
            }
        }
        max = max >-1?max+1:-1;
        System.out.println(max);
    }
}

86、最长元音子串的长度
定义：当一个字符串只有元音字母（aeiouAEIOU）组成，称为元音字符串。
现给定一个字符串，请找出其中最长的元音字符子串，并返回其长度；如果找不到，则返回0。

子串：字符串中任意个连续的字符组成的子序列称为该字符串的子串。

输入描述:
一个字符串，其长度范围：0 < length <= 65535。
字符串仅由字符a-z和A-Z组成。

输出描述:
一个整数，表示最长的元音字符子串的长度。

示例1
输入
asdbuiodevauufgh
输出
3
说明
样例1解释：最长元音子串为 “uio” 或 “auu”，其长度都为3，因此输出3

答案：
解法一：
import java.util.*;

public class Main {
    public static void main(String[] args) {
        String source = "aeiouAEIOU";
        Scanner sc = new Scanner(System.in);
        String str = sc.next();
        int result = 0;
        int count = 0;
        for (int i = 0; i < str.length(); i++) {
            String temp = String.valueOf(str.charAt(i));
            if(source.contains(temp)) {
                count++;
            } else {
                count = 0;
            }
            if(count > result) {
                result = count;
            }
        }
        System.out.println(result);
        
        
    }
}

87、最长子字符串的长度（一）
给你一个字符串 s，字符串s首尾相连成一个环形 ，请你在环中找出 'o' 字符出现了偶数次最长子字符串的长度。

输入描述:
输入是一串小写字母组成的字符串
输出描述:
输出是一个整数

示例1
输入
alolobo
输出
6
说明
最长子字符串之一是 "alolob"，它包含'o' 2个。
示例2
输入
looxdolx
输出
7
说明
最长子字符串是 "oxdolxl"，由于是首尾连接在一起的，所以最后一个 'x' 和开头的 'l'是连接在一起的，此字符串包含 2 个'o' 。
示例3
输入
bcbcbc
输出
6
说明
这个示例中，字符串 "bcbcbc" 本身就是最长的，因为  'o' 都出现了 0 次。
备注:
1 <= s.length <= 5 x 10^5
s 只包含小写英文字母。

答案：
解法一：
import java.util.Scanner;

public class Main {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		while(in.hasNext()) {
			String str = in.next();
			
            int sum = 0;
            for(int i = 0; i < str.length(); i++) {
                char c = str.charAt(i);
                if(c == 'o') {
                    sum += 1;
                }
            }
            int length = 0;
            if(sum % 2 == 0) {
//            	if(str.charAt(0) == 'o') {
                    length = str.length();
//                } else {
//                    length = str.length() + 1;
//                }
            } else {
            	
//                if(str.charAt(0) == 'o') {
//                	length = str.length() + 1;
//                } else {
                	length = str.length() - 1;
//                }
            }
            System.out.println(length + "");
		}
	}
	
	
}

这道题  解法可能比较笨   但是用例100%

/* 
  输入描述:
  1、输入为一个字符串，一定包含@符号。@前的为全量字符集，@后的字为已占用字符集。
  2、已占用字符集中的字符一定是全量字符集中的字符。字符集中的字符跟字符之间使用英文逗号分隔。
  3、每个字符都表示为字符加数字的形式，用英文冒号分隔，比如a:1，表示1个a字符。
  4、字符只考虑英文字母，区分大小写，数字只考虑正整形，数量不超过100。
  5、如果一个字符都没被占用，@标识仍然存在，例如a:3,b:5,c:2@
  输出描述:
  输出可用字符集，不同的输出字符集之间回车换行。
  注意，输出的字符顺序要跟输入一致。不能输出b:3,a:2,c:2
  如果某个字符已全被占用，不需要再输出。

  示例1
  输入
  a:3,b:5,c:2@a:1,b:2
  输出
  a:2,b:3,c:2
  说明
  全量字符集为3个a，5个b，2个c。
  已占用字符集为1个a，2个b。
  由于已占用字符不能再使用，因此，剩余可用字符为2个a，3个b，2个c。
  因此输出a:2,b:3,c:2 
*/


// var lines = line.readline()
// str 表示输入内容 通过考试程序自定义的方法得到的字符串（类似lines = line.readline()   可参考试的例题）

function getCharacterSet(str) {
  //  str = "a:3,b:5,c:2@a:1,b:2"
  var splitedArr = str.split('@') // ["a:3,b:5,c:2", "a:1,b:2"]
  var newArr1 = splitedArr[0].split(',') // "a:3,b:5,c:2"   ["a:3","b":5]
  var newArr2 = splitedArr[1].split(',') // "a:1,b:2"     ["a:1", "b:2"]
  var keyList1 = [] // 定义一个数组 用于接收第一个字符集的key  ['a', 'b', 'c']
  var valueList1 = [] // 定义一个数组 用于接收第一个字符集key对应的value 即个数 ['3', '5', '2']
  var keyList2 = [] // 定义一个数组 用于接收第二个字符集的key  ['a', 'b']
  var valueList2 = [] // 定义一个数组 用于接收第二个字符集key对应的value 即个数  ['1', '2']
  var printArr = [] // 定义一个最终的数组，用于接收目标字符串，方便最后做相关字符串拼接操作

  for (var i = 0; i < newArr1.length; i++) {
    keyList1.push(newArr1[i].split(':')[0]) 
    valueList1.push(newArr1[i].split(':')[1]) 
  }
  for (var j = 0; j < newArr2.length; j++) {
    keyList2.push(newArr2[j].split(':')[0])
    valueList2.push(newArr2[j].split(':')[1])
  }
  // 遍历第一个字符集 (为全量字符集)
  for (var i = 0 ; i < keyList1.length; i++) {
    var printItem = ''
    var item1 = keyList1[i]
    var value1 = Number(valueList1[i])
    var isIn = false // 定义一个变量 表示是否在全量字符集中，默认false, 表示不在
    var num = value1
    for (var j = 0; j < keyList2.length; j++) {
      // 遍历第二个字符集 (为已占用字符集)
      var item2 = keyList2[j]
      var value2 = Number(valueList2[j])
      if (item1 == item2) {
        // 说明 该key在全量字符集中，即被占用
        isIn = true
        // 获取差值
        num = value1 - value2
        // 此时可退出本层for循环
        break
      }
    }
    if (isIn) {
      // 被占用
      if (num > 0) {
        // 未占用完
        printItem = item1 + ':' + num // 获得目标组合串
      } else {
        // 占用完  (其实这个可以不用写，因为最开始定义的就是空串)
        printItem = ''
      }
    } else {
      // 未被占用
      printItem = item1 + ':' + num // 获得目标组合串
    }
    if (printItem) {
      printArr.push(printItem) // 获得目标组合串存入开始定义的数组中
    }
  }
  var printString = printArr.join(',') // 执行最终的拼接操作
  console.log(printString)
}
// 执行测试用例1
getCharacterSet("a:3,b:5,c:2@a:1,b:2")

// 执行测试用例2
getCharacterSet("a:7,b:2,c:4@a:2,b:2,c:1")
