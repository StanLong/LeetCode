
31、两数之和绝对值最小 两个数相加绝对值最小
给定一个从小到大的有序整数序列（存在正整数和负整数）数组 nums ，请你在该数组中找出两个数，其和的绝对值(|nums[x]+nums[y]|)为最小值，并返回这个绝对值。
每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

输入描述:
一个通过空格分割的有序整数序列字符串，最多1000个整数，且整数数值范围是 -65535~65535。
输出描述:
两数之和绝对值最小值

示例1
输入
-3 -1 5 7 11 15
输出
2
说明
因为 |nums[0] + nums[2]| = |-3 + 5| = 2 最小，所以返回 2

答案：
解法一：
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Main {
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String str;
        while ((str=br.readLine())!=null) {
            String[] nums=str.split(" ");
            int minNum=Integer.MAX_VALUE;
            for(int i=0;i<nums.length-1;i++){
                for(int  j=i+1;j<nums.length;j++){
                    int temp=Math.abs((Integer.valueOf(nums[i])+Integer.valueOf(nums[j])));
                
                    if(minNum>temp){
                        minNum=temp;
                    }
                }
            }
            System.out.println(minNum);
        }
    }
}


32、流水线 
一个工厂有m条流水线，来并行完成n个独立的作业，该工厂设置了一个调度系统，在安排作业时，总是优先执行处理时间最短的作业。
现给定流水线个数m，需要完成的作业数n, 每个作业的处理时间分别为t1,t2…tn。请你编程计算处理完所有作业的耗时为多少？
当n>m时，首先处理时间短的m个作业进入流水线，其他的等待，当某个作业完成时，依次从剩余作业中取处理时间最短的进入处理。

输入描述:
第一行为2个整数（采用空格分隔），分别表示流水线个数m和作业数n；
第二行输入n个整数（采用空格分隔），表示每个作业的处理时长t1,t2…tn。
0< m,n<100，0<t1,t2…tn<100。
注：保证输入都是合法的。
输出描述:
输出处理完所有作业的总时长

示例1
输入
3 5 
8 4 3 2 10
输出
13
说明
1、先安排时间为2、3、4的3个作业。
2、第一条流水线先完成作业，然后调度剩余时间最短的作业8。
3、第二条流水线完成作业，然后调度剩余时间最短的作业10。
4、总工耗时就是第二条流水线完成作业的时间13（3+10）。

答案：
解法一：

import java.util.Arrays;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int m=sc.nextInt(); //流水线
        int n=sc.nextInt();//作业数目
        int time[]=new int[n];
        for(int i=0;i<n;i++){
            time[i]=sc.nextInt();
        }
        System.out.println(caculate(m,n,time));
    }

    public static int caculate(int m,int n,int time[]){
        Arrays.sort(time);
        int sum[]=new int[m]; //m条流水线，m个结果，取最大
        for(int i=0;i<n;i++){
           sum[i%m]+=time[i];
        }
        int res=0;
        for(int j=0;j<m;j++){
            res=Math.max(res,sum[j]);
        }
        return res;
    }
}

33、乱序整数序列两数之和绝对值最小 
给定一个随机的整数（可能存在正整数和负整数）数组 nums ，请你在该数组中找出两个数，其和的绝对值(|nums[x]+nums[y]|)为最小值，并返回这个两个数（按从小到大返回）以及绝对值。
每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

输入描述:
一个通过空格分割的有序整数序列字符串，最多1000个整数，且整数数值范围是 [-65535, 65535]。
输出描述:
两数之和绝对值最小值

示例1
输入
-1 -3 7 5 11 15
输出
-3 5 2
说明
因为 |nums[0] + nums[2]| = |-3 + 5| = 2 最小，所以返回 -3 5 2

答案：
解法一：
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int total = 65535 * 2;// 记录和绝对值
		int[] index = new int[2];// 记录排序后数字数组下标
		Scanner sc = new Scanner(System.in);
		String dataList = sc.nextLine();
		// 将数字字符串转为数字数组，并排序
		String[] strArr = dataList.split(" ");
		ArrayList<Integer> dataNewList = new ArrayList<Integer>();
		for (int i = 0; i < strArr.length; i++) {
			dataNewList.add(Integer.valueOf(strArr[i]));
		}
		dataNewList.sort(Comparator.naturalOrder());// 升序排列

		// 冒泡法记录和绝对值最小值
		for (int i = 0; i < dataNewList.size(); i++) {
			for (int j = i + 1; j < dataNewList.size(); j++) {
				int temp = Math.abs(dataNewList.get(i) + dataNewList.get(j));
				if (temp <= total) {
					total = temp;
					index[0] = i;
					index[1] = j;
				}
			}
		}
		System.out.println(dataNewList.get(index[0]) + " "
				+ dataNewList.get(index[1]) + " " + total);
    }
}

34、内存资源分配
有一个简易内存池，内存按照大小粒度分类，每个粒度有若干个可用内存资源，用户会进行一系列内存申请，需要按需分配内存池中的资源，返回申请结果成功失败列表。分配规则如下：
1、分配的内存要大于等于内存申请量，存在满足需求的内存就必须分配，优先分配粒度小的，但内存不能拆分使用。
2、需要按申请顺序分配，先申请的先分配。
3、有可用内存分配则申请结果为true，没有可用内存分配则返回false。
注：不考虑内存释放。

输入描述:
输入为两行字符串：
第一行为内存池资源列表，包含内存粒度数据信息，粒度数据间用逗号分割，一个粒度信息内部用冒号分割，冒号前为内存粒度大小，冒号后为数量。资源列表不大于1024，每个粒度的数量不大于4096
第二行为申请列表，申请的内存大小间用逗号分隔。申请列表不大于100000
如：
64:2,128:1,32:4,1:128
50,36,64,128,127

输出描述:
输出为内存池分配结果。
如：
true,true,true,false,false

示例1
输入
64:2,128:1,32:4,1:128
50,36,64,128,127
输出
true,true,true,false,false
说明
内存池资源包含：64K共2个、128K共1个、32K共4个、1K共128个的内存资源；
针对50,36,64,128,127的内存申请序列，分配的内存依次是：64,64,128,NULL,NULL,第三次申请内存时已经将128分配出去，
因此输出结果是：true,true,true,false,false

答案：
解法一：
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String mem = scanner.nextLine();
        String app = scanner.nextLine();
        String[] mems = mem.split(",");
        String[] apps = app.split(",");
        if (mems.length > 1024 || apps.length >100000)
            return;
        Map<Integer,Integer> map = new LinkedHashMap<>();
        for (int i = 0;i<mems.length;i++){
            String[] tmp = mems[i].split(":");
            if (Integer.parseInt(tmp[1]) > 4096)
                return;
            map.put(Integer.parseInt(tmp[0]),Integer.parseInt(tmp[1]));
        }
        for (int i = 0;i<apps.length;i++){
            if (i > 0){
                System.out.print(",");
            }
            List<Integer> list = new ArrayList<>();
            for (Integer integer : map.keySet()){
                if (integer >= Integer.parseInt(apps[i])){
                    list.add(integer);
                }
            }
            if (list.size() > 0){
                Integer a = map.get(Collections.min(list));
                a = a - 1;
                if (a == 0){
                    map.remove(Collections.min(list));
                }else{
                    map.put(Collections.min(list),a);
                }
                System.out.print("true");
            }else{
                System.out.print("false");
            }
        }
    }
}


35、判断一组不等式是否满足约束并输出最大差 
给定一组不等式，判断是否成立并输出不等式的最大差(输出浮点数的整数部分)，要求：1）不等式系数为double类型，是一个二维数组；2）不等式的变量为int类型，是一维数组；3）不等式的目标值为double类型，是一维数组；4）不等式约束为字符串数组，只能是：">",">=","<","<=","="，例如,不等式组：
a11*x1+a12*x2+a13*x3+a14*x4+a15*x5<=b1;
a21*x1+a22*x2+a23*x3+a24*x4+a25*x5<=b2;
a31*x1+a32*x2+a33*x3+a34*x4+a35*x5<=b3;

最大差=max{  (a11*x1+a12*x2+a13*x3+a14*x4+a15*x5-b1),   (a21*x1+a22*x2+a23*x3+a24*x4+a25*x5-b2),   (a31*x1+a32*x2+a33*x3+a34*x4+a35*x5-b3)  }，类型为整数(输出浮点数的整数部分)

输入描述:
1）不等式组系数(double类型)：
a11,a12,a13,a14,a15 
a21,a22,a23,a24,a25 
a31,a32,a33,a34,a35
2）不等式变量(int类型)：
x1,x2,x3,x4,x5
3）不等式目标值(double类型)：b1,b2,b3
4)不等式约束(字符串类型):<=,<=,<=

输入：a11,a12,a13,a14,a15;a21,a22,a23,a24,a25;a31,a32,a33,a34,a35;x1,x2,x3,x4,x5;b1,b2,b3;<=,<=,<=

输出描述:
true 或者 false, 最大差

示例1
输入
2.3,3,5.6,7,6;11,3,8.6,25,1;0.3,9,5.3,66,7.8;1,3,2,7,5;340,670,80.6;<=,<=,<=
输出
false 458
示例2
输入
2.36,3,6,7.1,6;1,30,8.6,2.5,21;0.3,69,5.3,6.6,7.8;1,13,2,17,5;340,67,300.6;<=,>=,<=
输出
false 758

答案：
解法一：
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        double [][] a = new double[3][5];
        int [] x = new int[5];
        double [] b = new double[3];
        String [] eqExpression = new String[3];
        int [] resultArrTemp = new int[3];
        int max = 0;
        Scanner scanner = new Scanner(System.in);
        boolean result = true;

        String lines = scanner.nextLine();
        String [] line = lines.split(";");

        //int i;
        for (int i = 0; i < 3; i++) {
            String [] temp1 = line[i].split(",");
            for (int j = 0; j < 5; j++) {
                a[i][j] = Double.valueOf(temp1[j]);
            }
        }
        String [] temp2 = line[3].split(",");
        for (int i = 0; i < 5; i++) {

            x[i] = Integer.valueOf(temp2[i]);
        }
        String [] temp3 = line[4].split(",");
        for (int i = 0; i < 3; i++) {

            b[i] = Double.valueOf(temp3[i]);
        }
        String [] temp4 = line[5].split(",");
        for (int i = 0; i < 3; i++) {
            eqExpression[i] = temp4[i];
        }

        for (int i = 0; i < 3; i++) {
            double temp=0.0;
            for (int j = 0; j < 5; j++) {
                temp = temp + a[i][j]*x[j];
            }
            if ("<=".equals(eqExpression[i])){
                if (temp<=b[i]){
                    result = result && true;
                    resultArrTemp[i] = (int) ((temp-b[i])/1);
                }else{
                    result = result && false;
                    resultArrTemp[i] = (int) ((temp-b[i])/1);
                }
            } else if ("<".equals(eqExpression[i])) {
                if (temp<b[i]){
                    result = result && true;
                    resultArrTemp[i] = (int) ((temp-b[i])/1);
                }else{
                    result = result && false;
                    resultArrTemp[i] = (int) ((temp-b[i])/1);
                }
            } else if ("=".equals(eqExpression[i])) {
                //String tempStr1 = String.valueOf(temp);
                //String tempStr2 = String.valueOf(b[i]);
                if (temp==b[i]){
                    result = result && true;
                    resultArrTemp[i] = (int) ((temp-b[i])/1);
                }else{
                    result = result && false;
                    resultArrTemp[i] = (int) ((temp-b[i])/1);
                }
            } else if (">".equals(eqExpression[i])) {
                if (temp>b[i]){
                    result = result && true;
                    resultArrTemp[i] = (int) ((temp-b[i])/1);
                }else{
                    result = result && false;
                    resultArrTemp[i] = (int) ((temp-b[i])/1);
                }
            } else if (">=".equals(eqExpression[i])) {
                if (temp>=b[i]){
                    result = result && true;
                    resultArrTemp[i] = (int) ((temp-b[i])/1);
                }else{
                    result = result && false;
                    resultArrTemp[i] = (int) ((temp-b[i])/1);
                }
            }
        }
        for (int i = 0; i < 3; i++) {
            if (i==0){
                max = resultArrTemp[i];
            }
            if (resultArrTemp[i]>=max){
                max = resultArrTemp[i];
            }
        }
        System.out.println(result+" "+max);
    }
}


36、判断字符串子序列
给定字符串 target和 source, 判断 target 是否为 source 的子序列。
你可以认为 target 和  source 中仅包含英文小写字母。字符串 source可能会很长（长度 ~= 500,000），而 target 是个短字符串（长度 <=100）。
字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，"abc"是"aebycd"的一个子序列，而"ayb"不是）。
请找出最后一个子序列的起始位置。

输入描述:
第一行为target，短字符串（长度 <=100）
第二行为source，长字符串（长度 ~= 500,000）
输出描述:
最后一个子序列的起始位置， 即最后一个子序列首字母的下标

示例1
输入
abc
abcaybec
输出
3
说明
这里有两个abc的子序列满足，取下标较大的，故返回3
备注:
若在source中找不到target，则输出-1

答案：
解法一：
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        char[] tChars = scanner.nextLine().toCharArray();
        char[] sChars = scanner.nextLine().toCharArray();
        LinkedHashMap<Character, Integer> characterIntegerLinkedHashMap = new LinkedHashMap<Character, Integer>();
        int des=sChars.length;
        if (tChars.length>0&&sChars.length>0) {
            for (int j = tChars.length - 1; j >= 0; j--) {
                for (int i = sChars.length - 1; i >= 0; i--) {
                    if (tChars[j] == sChars[i] & des > i) {
                        des = i;
                        characterIntegerLinkedHashMap.put(tChars[j], i);
                        break;
                    }
                }
            }
            int ros = 0;
            for (int j = tChars.length - 1; j >= 0; j--) {
                if (!characterIntegerLinkedHashMap.containsKey(tChars[j])) {
                    ros = -1;
                    break;
                }
            }
            if (ros != -1) {
                System.out.println(characterIntegerLinkedHashMap.get(tChars[0]));
            } else {
                System.out.println(ros);
            }
        }else {
            System.out.println(-1);
        }
    }
}


37、拼接URL URL拼接
给定一个URL前缀和URL后缀，通过","分割，需要将其连接为一个完整的URL，如果前缀结尾和后缀开头都没有“/”，需自动补上“/”连接符，如果前缀结尾和后缀开头都为“/”，需自动去重。
约束：不用考虑前后缀URL不合法情况。

输入描述:
URL前缀（一个长度小于100的字符串),URL后缀（一个长度小于100的字符串）。
输出描述:
拼接后的URL。

示例1
输入
/acm,/bb
输出
/acm/bb
示例2
输入
/abc/,/bcd
输出
/abc/bcd
示例3
输入
/acd,bef
输出
/acd/bef
示例4
输入
,
输出
/

答案：
解法一：
// 本题为考试单行多行输入输出规范示例，无需提交，不计分。
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        while (in.hasNextLine()) {// 注意，如果输入是多个测试用例，请通过while循环处理多个测试用例
            String inStr = in.nextLine();
            String out =  inStr.replaceFirst(",", "/");
            out = out.replace("//", "/");
            out = out.replace("//", "/");
            System.out.println(out);
        }
    }
}

38、求符合要求的结对方式
用一个数组A代表程序员的工作能力，公司想通过结对编程的方式提高员工的能力，假设结对后的能力为两个员工的能力之和，求一共有多少种结对方式使结对后能力为N。

输入描述:
5
1 2 2 2 3
4
第一行为员工的总人数，取值范围[1,1000]
第二行为数组A的元素，每个元素的取值范围[1,1000]
第三行为N的值，取值范围[1,1000]
输出描述:
4
满足结对后能力为N的结对方式总数

示例1
输入
5
1 2 2 2 3
4
输出
4
说明
满足要求的结对方式为：A[0]和A[4]，A[1]和A[2]，A[1]和A[3]，A[2]和A[3]

答案：
解法一：
import java.util.*;

public class Main {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int total = sc.nextInt();
        int[] person = new int[total];
        for (int i = 0; i < total; i++) {
            person[i] = sc.nextInt();
        }
        
        int sum = sc.nextInt();
        int ans = 0;
        for (int i = 0; i < total; i++) {
            int persona = person[i];
            for (int j = i + 1; j < total; j++) {
                int personb = person[j];
                if (sum == persona + personb) {
                    ans++;
                }
            }
        }
        System.out.println(ans);
    }
}

39、求解连续数列 
已知连续正整数数列{K}=K1,K2,K3...Ki的各个数相加之和为S，i=N (0<S<100000, 0<N<100000), 求此数列K。

输入描述:
输入包含两个参数，1）连续正整数数列和S，2）数列里数的个数N。
输出描述:
如果有解输出数列K，如果无解输出-1

示例1
输入
525 6
输出
85 86 87 88 89 90
示例2
输入
3 5
输出
-1

答案：
解法一：
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int sum = in.nextInt();
        int n = in.nextInt();
        // sum(x x+1 x+2 ... x+n-1) = sum
        // n*x + n*(n-1)/2 = sum
        // x= [sum - n*(n-1)/2 ]/n
        int temp = sum - n*(n-1)/2;
        if (temp <=0 || temp%n!=0){
            System.out.println(-1);
            return;
        }
        int begin = temp/n;
        for (int i = 0; i < n; i++) {
            System.out.print(begin+i);
            System.out.print(' ');
        }
    }
}

40、求字符串中所有整数的最小和
输入字符串s，输出s中包含所有整数的最小和
说明
1. 字符串s，只包含 a-z A-Z +- ；
2. 合法的整数包括
    1） 正整数 一个或者多个0-9组成，如 0 2 3 002 102
    2）负整数 负号 - 开头，数字部分由一个或者多个0-9组成，如 -0 -012 -23 -00023

输入描述:
包含数字的字符串
输出描述:
所有整数的最小和

示例1
输入
bb1234aa
输出
10
示例2
输入
bb12-34aa
输出
-31
说明
1+2+（-34） = 31

答案：
解法一：
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

	public static void main(String[] args) throws IOException {
		// 计算 字符串中所有整数的最小和 ,字符串包括a-z+- ;
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String input = br.readLine();
		char[] chars = input.toCharArray();
		char tmpChar;
		long sum = 0;
		// 负数的标记
		boolean flag = false;
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < chars.length; i++) {
			tmpChar = chars[i];
			// 判断字符 0-9 -
			if ('0' <= tmpChar && tmpChar <= '9') {
				if (flag) {
					// 减去最大的负数
					sb.append(tmpChar);
				} else {
					// 加上个位数的整数
					sum += Long.parseLong(tmpChar + "");
				}
			} else if ('-' == tmpChar) {
				if (flag) {
					if (!sb.toString().isEmpty()) {
						sum -= Long.parseLong(sb.toString());
						sb = new StringBuilder();
					}
				}
				flag = true;
			} else {
				flag = false;
				if (!sb.toString().isEmpty()) {
					sum -= Long.parseLong(sb.toString());
					sb = new StringBuilder();
				}
			}
		}
		if (flag) {
			if (!sb.toString().isEmpty()) {
				sum -= Long.parseLong(sb.toString());
			}
		}
		System.out.println(sum);
	}
}
